name: Deploy to Staging

permissions:
  contents: read
  actions: write
  id-token: write

on:
  push:
    branches:
      - develop

jobs:
  provision-infra:
    name: "Phase 1: Provision Infrastructure"
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      instance_ip: ${{ steps.get_outputs.outputs.instance_ip }}
      boot_disk_name: ${{ steps.get_outputs.outputs.boot_disk_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Google Cloud credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        working-directory: ./infra/staging
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: ./infra/staging
        run: terraform apply -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"

      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: ./infra/staging
        run: |
          IP=$(terraform output -raw instance_ip)
          DISK_NAME=$(terraform output -raw boot_disk_name)
          echo "instance_ip=$IP" >> $GITHUB_OUTPUT
          echo "boot_disk_name=$DISK_NAME" >> $GITHUB_OUTPUT
          echo "✅ Infrastructure provisionnée. IP: $IP, Disque: $DISK_NAME"

      - name: Upload Terraform state as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-staging
          path: infra/staging/terraform.tfstate

  configure-application:
    name: "Phase 2: Configure Application"
    runs-on: ubuntu-latest
    needs: provision-infra
    if: needs.provision-infra.outputs.instance_ip != ''

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Google Cloud credentials (for snapshot)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Python and Ansible
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install --user ansible

      - name: Set up SSH key for Ansible
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create Ansible inventory
        run: |
          echo "[api]" > inventory.ini
          echo "${{ needs.provision-infra.outputs.instance_ip }} ansible_user=debian ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> inventory.ini

      - name: Run Ansible playbook (Deploy API)
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPO_BRANCH: develop
        run: |
          ansible-playbook -i inventory.ini ansible/deploy.yml --extra-vars "gh_pat=${GH_PAT} repo_branch=${REPO_BRANCH}"

      - name: Run Ansible playbook (Monitoring)
        run: ansible-playbook -i inventory.ini ansible/monitoring.yml

      - name: Create Success Snapshot
        if: success()
        run: |
          echo "📸 Creating snapshot of the VM disk as a record of successful deployment..."
          SNAPSHOT_NAME="deploy-staging-$(date +%Y%m%d%H%M%S)"
          gcloud compute disks snapshot ${{ needs.provision-infra.outputs.boot_disk_name }} \
            --zone="${{ secrets.GOOGLE_ZONE }}" \
            --project="${{ secrets.GCP_PROJECT_ID }}" \
            --snapshot-names="$SNAPSHOT_NAME" \
            --quiet
          echo "✅ Snapshot '$SNAPSHOT_NAME' created."

  rollback-on-failure:
    name: "Phase 3: Rollback on Failure"
    runs-on: ubuntu-latest
    needs: [provision-infra, configure-application]
    if: failure() && needs.configure-application.result == 'failure'

    steps:
      - name: Set up Google Cloud credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Find last successful snapshot
        id: find_snapshot
        run: |
          echo "🔥 Configuration failed. Attempting to rollback..."
          LAST_SNAPSHOT=$(gcloud compute snapshots list \
            --filter="name~'deploy-staging' AND status=READY" \
            --sort-by="~creationTimestamp" \
            --limit=1 \
            --format="value(name)")

          if [ -z "$LAST_SNAPSHOT" ]; then
            echo "⚠️ No previous snapshot found to rollback to. Manual intervention required."
            exit 1
          fi
          echo "snapshot_name=$LAST_SNAPSHOT" >> $GITHUB_OUTPUT
          echo "✅ Found last snapshot: $LAST_SNAPSHOT"

      - name: Restore VM disk from snapshot
        run: |
          gcloud compute disks create ${{ needs.provision-infra.outputs.boot_disk_name }} \
            --source-snapshot="${{ steps.find_snapshot.outputs.snapshot_name }}" \
            --zone="${{ secrets.GOOGLE_ZONE }}" \
            --project="${{ secrets.GCP_PROJECT_ID }}" \
            --quiet

          echo "✅ Rolled back disk '${{ needs.provision-infra.outputs.boot_disk_name }}' to snapshot '${{ steps.find_snapshot.outputs.snapshot_name }}'."
