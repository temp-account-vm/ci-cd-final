- name: DÃ©ployer l'API sur GCP
  hosts: api
  become: yes
  collections:
    - community.docker

  vars:
    gh_pat: "{{ gh_pat | default(lookup('env', 'GH_PAT')) }}"
    repo_url: "https://{{ gh_pat }}@github.com/temp-account-vm/ci-cd-final.git"
    repo_branch: "{{ repo_branch | default(lookup('env', 'REPO_BRANCH')) }}"
    app_root: "/home/debian/api"
    nvm_dir: "/home/debian/.nvm"
    node_version: "22.14.0"
    monitoring_dir: "/opt/monitoring"

  tasks:
    - name: Install dependencies
      apt:
        name:
          - curl
          - git
          - docker.io
          - python3-pip
        state: present
        update_cache: yes

    - name: Download and install NVM
      become: false
      shell: |
        export PROFILE=/home/debian/.bashrc
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
      args:
        creates: "{{ nvm_dir }}"

    - name: Load NVM and install Node.js
      become: false
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install {{ node_version }}
        nvm alias default {{ node_version }}
      environment:
        NVM_DIR: "{{ nvm_dir }}"
      args:
        executable: /bin/bash

    - name: Check Node.js version
      become: false
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        source $NVM_DIR/nvm.sh
        node -v
        npm -v
      register: node_version_output
      changed_when: false
      args:
        executable: /bin/bash

    - name: Clone the repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_root }}"
        version: "{{ repo_branch }}"
        force: yes
      no_log: true

    - name: Ensure the app root directory exists
      file:
        path: "{{ app_root }}"
        recurse: yes
        state: directory
        owner: "{{ ansible_user | default('debian') }}"
        group: "{{ ansible_user | default('debian') }}"

    - name: Install npm dependencies
      become: false
      shell: |
        set -x
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use {{ node_version }}
        cd {{ app_root }}/api
        echo "==> Node.js version: $(node -v)"
        echo "==> npm version: $(npm -v)"
        if [ -f package-lock.json ]; then
          npm ci --only=production
        else
          echo "No package-lock.json found, running npm install"
          npm install --production
        fi
      args:
        executable: /bin/bash

    - name: Ensure PM2 is installed globally
      become: false
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use {{ node_version }}
        if ! command -v pm2 > /dev/null; then
          npm install -g pm2
        fi
      args:
        executable: /bin/bash

    - name: Start app with PM2
      become: false
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use {{ node_version }}
        cd {{ app_root }}/api
        pm2 start index.js --name my-api || pm2 restart my-api
        pm2 save
      args:
        executable: /bin/bash

    # Monitoring stack deployment

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Python SDK
      pip:
        name: docker
        state: present

    - name: Check if Docker Compose v2 is available
      shell: docker compose version
      register: docker_compose_check
      changed_when: false
      failed_when: false

    - name: Create docker CLI plugins directory
      file:
        path: /usr/local/lib/docker/cli-plugins
        state: directory
        mode: '0755'

    - name: Install Docker Compose v2 binary if not present
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-linux-x86_64"
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        mode: '0755'
      when: docker_compose_check.rc != 0

    - name: Create monitoring directory
      file:
        path: "{{ monitoring_dir }}"
        state: directory
        owner: "debian"
        mode: "0755"

    - name: Copy monitoring configuration files (Prometheus, Grafana, Loki)
      copy:
        src: "../monitoring/{{ item }}"
        dest: "{{ monitoring_dir }}/"
        owner: "debian"
      loop:
        - prometheus
        - grafana
        - loki

    - name: Generate Docker Compose file for monitoring stack
      template:
        src: ../monitoring/docker-compose.yml.j2
        dest: "{{ monitoring_dir }}/docker-compose.yml"
        owner: "debian"
        mode: "0644"

    - name: Deploy Docker Compose stack for monitoring
      community.docker.docker_compose_v2:
        project_src: "{{ monitoring_dir }}"
        state: present
        recreate: always
      register: output

    - name: Display Docker Compose output
      debug:
        var: output
